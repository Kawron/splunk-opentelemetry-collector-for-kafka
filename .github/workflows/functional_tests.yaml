name: Splunk Otel Kafka Connector Functional Test

on:
  push:
    branches:
      - main
  pull_request:

env:
  GO_VERSION: 1.24.4
  # Make sure to exit early if cache segment download times out after 2 minutes.
  # We limit cache download as a whole to 5 minutes.
  SEGMENT_DOWNLOAD_TIMEOUT_MINS: 2



jobs:
  functional-test:
    runs-on: ubuntu-latest
    env:
      CI_SPLUNK_VERSION: 9.4.1
      CI_SPLUNK_HOST: localhost
      CI_SPLUNK_USERNAME: admin
      CI_SPLUNK_HEC_TOKEN: "00000000-0000-0000-0000-0000000000000"
      CI_SPLUNK_PASSWORD: helloworld
      CI_SPLUNK_MGMT_PORT: 8089
      CI_KAFKA_BROKER_ADDRESS: "localhost:9092"
      CI_OTEL_BINARY_FILE: "otelcol_linux_amd64"
      CI_SPLUNK_INDEX: kafka
      CI_SPLUNK_HEADER_TEST_INDEX: kafka-header-index

    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: '**/go.sum'

      - name: Start Kafka
        uses: hoverkraft-tech/compose-action@v2.0.1
        with:
          compose-file: "./.github/docker_files/kafka_docker_compose.yaml"

      - name: Wait for Kafka Initialization
        run: |
          #Wait for Kafka to Be Ready
          for i in {1..30}; do
            nc -z localhost 9092 && echo "Kafka is ready!" && exit 0
            echo "Waiting for Kafka to be ready..."
            sleep 5
          done
          echo "Kafka did not start in time!" && exit 1

      - name: Start Splunk in docker
        run: |
          # Start Splunk in Docker
          docker run -d \
          --name splunk \
          --platform linux/amd64 \
          -e SPLUNK_START_ARGS="--accept-license" \
          -e SPLUNK_PASSWORD=${CI_SPLUNK_PASSWORD} \
          -p 8000:8000 \
          -p 8088:8088 \
          -p 8089:8089 \
          splunk/splunk:${CI_SPLUNK_VERSION} \

      - name: Wait for Splunk Initialization
        run: |
          echo "Waiting for Splunk to initialize..."
          timeout_seconds=120 # Set your timeout in seconds 
          start_time=$(date +%s)
          
          # Loop to check the Splunk container's health status
          while true; do
            current_time=$(date +%s)
            elapsed_time=$((current_time - start_time))

            STATUS=$(sudo docker inspect --format='{{.State.Health.Status}}' splunk)
            echo "Current Splunk health status: $STATUS (Elapsed time: ${elapsed_time}s)"
          
            if [ "$STATUS" == "healthy" ]; then
              echo "Splunk is fully initialized and healthy!"
              break
            fi
          
            if [ "$elapsed_time" -ge "$timeout_seconds" ]; then
              echo "Error: Splunk initialization timed out after $timeout_seconds seconds."
              exit 1 # Exit with an error code
            fi
          
            sleep 5
          done

      - name: Configure Splunk
        run: |
          # configure indexes
          curl -u ${CI_SPLUNK_USERNAME}:${CI_SPLUNK_PASSWORD} -k \
          https://${CI_SPLUNK_HOST}:${CI_SPLUNK_MGMT_PORT}/services/data/indexes \
          -d name=${CI_SPLUNK_INDEX} \
          -d datatype=event
          curl -u ${CI_SPLUNK_USERNAME}:${CI_SPLUNK_PASSWORD} -k \
          https://${CI_SPLUNK_HOST}:${CI_SPLUNK_MGMT_PORT}/services/data/indexes \
          -d name=${CI_SPLUNK_HEADER_TEST_INDEX} \
          -d datatype=event
          
          # configure HEC
          curl -u ${CI_SPLUNK_USERNAME}:${CI_SPLUNK_PASSWORD} -k \
            https://${CI_SPLUNK_HOST}:${CI_SPLUNK_MGMT_PORT}/services/data/inputs/http \
            -d name=my_hec_token \
            -d index=kafka \
            -d token=${CI_SPLUNK_HEC_TOKEN}


      - name: Download Splunk Otel Collector Binary
        working-directory: tests
        run: |
          wget -q https://github.com/signalfx/splunk-otel-collector/releases/latest/download/otelcol_linux_amd64
          chmod +x otelcol_linux_amd64

      - name: Run Tests
        working-directory: tests
        run: |
          go test -v -timeout 10m
